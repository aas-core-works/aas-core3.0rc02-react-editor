"""Provide common functionality to the generating scripts."""
import os.path
import pathlib
from typing import List

from aas_core_codegen.common import Stripped, Identifier
from icontract import require, ensure

REPO_ROOT = pathlib.Path(os.path.realpath(__file__)).parent.parent.parent

WARNING = Stripped(
    """\
//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//"""
)


@require(lambda identifier: len(identifier) > 0)
@ensure(lambda result: "`" not in result and '"' not in result and "'" not in result)
def identifier_as_label(identifier: Identifier) -> Stripped:
    """Generate the label based on the identifier."""
    parts = identifier.split("_")

    iterator = iter(parts)

    cased = []  # type: List[str]

    first_part = next(iterator)
    if first_part.upper() == first_part:
        cased.append(first_part)
    else:
        cased.append(first_part.capitalize())

    while (part := next(iterator, None), part is not None)[1]:
        assert part is not None
        cased.append(part)

    return Stripped(" ".join(cased))
