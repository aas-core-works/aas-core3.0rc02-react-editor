/**
 * Enhance instances recursively.
 *
 * @remark
 * Instances are expected to be enhanced only *once* to avoid unexpected behavior
 * since it is not clear how a re-enhancement logic should really work (merge with
 * a previous enhancement, replace the previous enhancement *etc.*).
 */

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as valtio from "valtio";

import * as incrementalid from "./incrementalid";
import * as model from "./model";

/**
 * Represent an error with a timestamp of the change.
 */
export class TimestampedError {
  constructor(
    public message: string,
    public instance: aas.types.Class,
    public relativePathFromInstance: Array<number | string>,
    public timestamp: number,
    public guid = incrementalid.next()
  ) {}

  pathAsString(): string {
    const path = model.collectPath(this.instance);
    path.push(...this.relativePathFromInstance);

    if (path.length === 0) {
      return "";
    }

    // NOTE (2023-02-10):
    // See: https://stackoverflow.com/questions/16696632/most-efficient-way-to-concatenate-strings-in-javascript
    // for string concatenation.
    let result = "";

    for (const segment of path) {
      if (typeof segment === "string") {
        result += `.${segment}`;
      } else {
        result += `[${segment}]`;
      }
    }

    return result;
  }

  relativePathFromInstanceAsString(): string {
    if (this.relativePathFromInstance.length === 0) {
      return "";
    }

    // NOTE (2023-02-10):
    // See: https://stackoverflow.com/questions/16696632/most-efficient-way-to-concatenate-strings-in-javascript
    // for string concatenation.
    let result = "";

    for (const segment of this.relativePathFromInstance) {
      if (typeof segment === "string") {
        result += `.${segment}`;
      } else {
        result += `[${segment}]`;
      }
    }

    return result;
  }
}

export class VersionedSet<T> {
  private readonly _content = new Set<T>();
  private readonly _versioning = valtio.proxy({ version: 0 });

  *[Symbol.iterator]() {
    yield* this._content;
  }

  add(item: T) {
    let bumpVersion = false;
    if (!this._content.has(item)) {
      this._content.add(item);
      bumpVersion = true;
    }

    if (bumpVersion) {
      this._versioning.version++;
    }
  }

  delete(item: T) {
    const bumpVersion = this._content.delete(item);
    if (bumpVersion) {
      this._versioning.version++;
    }
  }

  clear() {
    if (this._content.size === 0) {
      return;
    }

    this._content.clear();
    this._versioning.version++;
  }

  public get size() {
    return this._content.size;
  }

  public get versioning() {
    return this._versioning;
  }
}

class Enhancement {
  id: string;
  parent: aas.types.Class | null;
  relativePathFromParent: Array<number | string>;
  errors = valtio.ref(new VersionedSet<TimestampedError>());
  descendantsWithErrors = valtio.ref(new VersionedSet<aas.types.Class>());

  constructor(
    id: string,
    parent: aas.types.Class | null,
    relativePathFromParent: Array<number | string>
  ) {
    this.id = id;
    this.parent = parent;
    this.relativePathFromParent = relativePathFromParent;
  }
}

type MaybeEnhanced<ClassT extends aas.types.Class> = ClassT & {
  _aasCoreEditorEnhancement: Enhancement | undefined;
};

export type Enhanced<ClassT extends aas.types.Class> = ClassT & {
  _aasCoreEditorEnhancement: Enhancement;
};

export function asEnhanced<ClassT extends aas.types.Class>(
  instance: ClassT
): Enhanced<ClassT> | null {
  const maybeEnhanced = instance as unknown as MaybeEnhanced<ClassT>;
  return maybeEnhanced._aasCoreEditorEnhancement !== undefined
    ? (instance as Enhanced<ClassT>)
    : null;
}

export function isEnhanced<ClassT extends aas.types.Class>(
  instance: ClassT
): instance is Enhanced<ClassT> {
  const maybeEnhanced = instance as unknown as MaybeEnhanced<ClassT>;
  return maybeEnhanced._aasCoreEditorEnhancement !== undefined;
}

export function mustAsEnhanced<ClassT extends aas.types.Class>(
  instance: ClassT
): Enhanced<ClassT> {
  const maybeEnhanced = instance as unknown as MaybeEnhanced<ClassT>;
  if (maybeEnhanced._aasCoreEditorEnhancement === undefined) {
    console.error(
      "Expected an enhanced instance, but got an un-enhanced one.",
      instance
    );
    throw new Error("Assertion violation");
  }
  return maybeEnhanced as Enhanced<ClassT>;
}

/**
 * Enhance only the instance in-place and do not recurse into descendants.
 */
function enhanceNonRecursively(
  instance: aas.types.Class,
  parent: aas.types.Class | null,
  relativePathFromParent: Array<number | string>
) {
  if (isEnhanced(instance)) {
    console.error("The instance has been already enhanced.", instance);
    throw new Error("Assertion violation");
  }
  const toBeEnhanced = instance as unknown as MaybeEnhanced<aas.types.Class>;
  toBeEnhanced._aasCoreEditorEnhancement = new Enhancement(
    incrementalid.next(),
    parent,
    relativePathFromParent
  );
}

/**
 * Visit recursively the descendants and enhance them.
 */
class DescendantEnhancer extends aas.types.AbstractVisitor {
  override visitExtension(that: aas.types.Extension): void {
    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.refersTo !== null) {
      enhanceNonRecursively(that.refersTo, that, ["refersTo"]);
      this.visit(that.refersTo);
    }
  }

  override visitAdministrativeInformation(
    that: aas.types.AdministrativeInformation
  ): void {
    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }
  }

  override visitQualifier(that: aas.types.Qualifier): void {
    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.valueId !== null) {
      enhanceNonRecursively(that.valueId, that, ["valueId"]);
      this.visit(that.valueId);
    }
  }

  override visitAssetAdministrationShell(
    that: aas.types.AssetAdministrationShell
  ): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.administration !== null) {
      enhanceNonRecursively(that.administration, that, ["administration"]);
      this.visit(that.administration);
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.derivedFrom !== null) {
      enhanceNonRecursively(that.derivedFrom, that, ["derivedFrom"]);
      this.visit(that.derivedFrom);
    }

    enhanceNonRecursively(that.assetInformation, that, ["assetInformation"]);
    this.visit(that.assetInformation);

    if (that.submodels !== null) {
      for (let i = 0; i < that.submodels.length; i++) {
        enhanceNonRecursively(that.submodels[i], that, ["submodels", i]);

        this.visit(that.submodels[i]);
      }
    }
  }

  override visitAssetInformation(that: aas.types.AssetInformation): void {
    if (that.globalAssetId !== null) {
      enhanceNonRecursively(that.globalAssetId, that, ["globalAssetId"]);
      this.visit(that.globalAssetId);
    }

    if (that.specificAssetIds !== null) {
      for (let i = 0; i < that.specificAssetIds.length; i++) {
        enhanceNonRecursively(that.specificAssetIds[i], that, [
          "specificAssetIds",
          i,
        ]);

        this.visit(that.specificAssetIds[i]);
      }
    }

    if (that.defaultThumbnail !== null) {
      enhanceNonRecursively(that.defaultThumbnail, that, ["defaultThumbnail"]);
      this.visit(that.defaultThumbnail);
    }
  }

  override visitResource(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    that: aas.types.Resource
  ): void {
    // No further recursion possible.
  }

  override visitSpecificAssetId(that: aas.types.SpecificAssetId): void {
    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    enhanceNonRecursively(that.externalSubjectId, that, ["externalSubjectId"]);
    this.visit(that.externalSubjectId);
  }

  override visitSubmodel(that: aas.types.Submodel): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.administration !== null) {
      enhanceNonRecursively(that.administration, that, ["administration"]);
      this.visit(that.administration);
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.submodelElements !== null) {
      for (let i = 0; i < that.submodelElements.length; i++) {
        enhanceNonRecursively(that.submodelElements[i], that, [
          "submodelElements",
          i,
        ]);

        this.visit(that.submodelElements[i]);
      }
    }
  }

  override visitRelationshipElement(that: aas.types.RelationshipElement): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    enhanceNonRecursively(that.first, that, ["first"]);
    this.visit(that.first);

    enhanceNonRecursively(that.second, that, ["second"]);
    this.visit(that.second);
  }

  override visitSubmodelElementList(that: aas.types.SubmodelElementList): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.value !== null) {
      for (let i = 0; i < that.value.length; i++) {
        enhanceNonRecursively(that.value[i], that, ["value", i]);

        this.visit(that.value[i]);
      }
    }

    if (that.semanticIdListElement !== null) {
      enhanceNonRecursively(that.semanticIdListElement, that, [
        "semanticIdListElement",
      ]);
      this.visit(that.semanticIdListElement);
    }
  }

  override visitSubmodelElementCollection(
    that: aas.types.SubmodelElementCollection
  ): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.value !== null) {
      for (let i = 0; i < that.value.length; i++) {
        enhanceNonRecursively(that.value[i], that, ["value", i]);

        this.visit(that.value[i]);
      }
    }
  }

  override visitProperty(that: aas.types.Property): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.valueId !== null) {
      enhanceNonRecursively(that.valueId, that, ["valueId"]);
      this.visit(that.valueId);
    }
  }

  override visitMultiLanguageProperty(
    that: aas.types.MultiLanguageProperty
  ): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.value !== null) {
      for (let i = 0; i < that.value.length; i++) {
        enhanceNonRecursively(that.value[i], that, ["value", i]);

        this.visit(that.value[i]);
      }
    }

    if (that.valueId !== null) {
      enhanceNonRecursively(that.valueId, that, ["valueId"]);
      this.visit(that.valueId);
    }
  }

  override visitRange(that: aas.types.Range): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }
  }

  override visitReferenceElement(that: aas.types.ReferenceElement): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.value !== null) {
      enhanceNonRecursively(that.value, that, ["value"]);
      this.visit(that.value);
    }
  }

  override visitBlob(that: aas.types.Blob): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }
  }

  override visitFile(that: aas.types.File): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }
  }

  override visitAnnotatedRelationshipElement(
    that: aas.types.AnnotatedRelationshipElement
  ): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    enhanceNonRecursively(that.first, that, ["first"]);
    this.visit(that.first);

    enhanceNonRecursively(that.second, that, ["second"]);
    this.visit(that.second);

    if (that.annotations !== null) {
      for (let i = 0; i < that.annotations.length; i++) {
        enhanceNonRecursively(that.annotations[i], that, ["annotations", i]);

        this.visit(that.annotations[i]);
      }
    }
  }

  override visitEntity(that: aas.types.Entity): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.statements !== null) {
      for (let i = 0; i < that.statements.length; i++) {
        enhanceNonRecursively(that.statements[i], that, ["statements", i]);

        this.visit(that.statements[i]);
      }
    }

    if (that.globalAssetId !== null) {
      enhanceNonRecursively(that.globalAssetId, that, ["globalAssetId"]);
      this.visit(that.globalAssetId);
    }

    if (that.specificAssetId !== null) {
      enhanceNonRecursively(that.specificAssetId, that, ["specificAssetId"]);
      this.visit(that.specificAssetId);
    }
  }

  override visitEventPayload(that: aas.types.EventPayload): void {
    enhanceNonRecursively(that.source, that, ["source"]);
    this.visit(that.source);

    if (that.sourceSemanticId !== null) {
      enhanceNonRecursively(that.sourceSemanticId, that, ["sourceSemanticId"]);
      this.visit(that.sourceSemanticId);
    }

    enhanceNonRecursively(that.observableReference, that, [
      "observableReference",
    ]);
    this.visit(that.observableReference);

    if (that.observableSemanticId !== null) {
      enhanceNonRecursively(that.observableSemanticId, that, [
        "observableSemanticId",
      ]);
      this.visit(that.observableSemanticId);
    }

    if (that.subjectId !== null) {
      enhanceNonRecursively(that.subjectId, that, ["subjectId"]);
      this.visit(that.subjectId);
    }
  }

  override visitBasicEventElement(that: aas.types.BasicEventElement): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    enhanceNonRecursively(that.observed, that, ["observed"]);
    this.visit(that.observed);

    if (that.messageBroker !== null) {
      enhanceNonRecursively(that.messageBroker, that, ["messageBroker"]);
      this.visit(that.messageBroker);
    }
  }

  override visitOperation(that: aas.types.Operation): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.inputVariables !== null) {
      for (let i = 0; i < that.inputVariables.length; i++) {
        enhanceNonRecursively(that.inputVariables[i], that, [
          "inputVariables",
          i,
        ]);

        this.visit(that.inputVariables[i]);
      }
    }

    if (that.outputVariables !== null) {
      for (let i = 0; i < that.outputVariables.length; i++) {
        enhanceNonRecursively(that.outputVariables[i], that, [
          "outputVariables",
          i,
        ]);

        this.visit(that.outputVariables[i]);
      }
    }

    if (that.inoutputVariables !== null) {
      for (let i = 0; i < that.inoutputVariables.length; i++) {
        enhanceNonRecursively(that.inoutputVariables[i], that, [
          "inoutputVariables",
          i,
        ]);

        this.visit(that.inoutputVariables[i]);
      }
    }
  }

  override visitOperationVariable(that: aas.types.OperationVariable): void {
    enhanceNonRecursively(that.value, that, ["value"]);
    this.visit(that.value);
  }

  override visitCapability(that: aas.types.Capability): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.semanticId !== null) {
      enhanceNonRecursively(that.semanticId, that, ["semanticId"]);
      this.visit(that.semanticId);
    }

    if (that.supplementalSemanticIds !== null) {
      for (let i = 0; i < that.supplementalSemanticIds.length; i++) {
        enhanceNonRecursively(that.supplementalSemanticIds[i], that, [
          "supplementalSemanticIds",
          i,
        ]);

        this.visit(that.supplementalSemanticIds[i]);
      }
    }

    if (that.qualifiers !== null) {
      for (let i = 0; i < that.qualifiers.length; i++) {
        enhanceNonRecursively(that.qualifiers[i], that, ["qualifiers", i]);

        this.visit(that.qualifiers[i]);
      }
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }
  }

  override visitConceptDescription(that: aas.types.ConceptDescription): void {
    if (that.extensions !== null) {
      for (let i = 0; i < that.extensions.length; i++) {
        enhanceNonRecursively(that.extensions[i], that, ["extensions", i]);

        this.visit(that.extensions[i]);
      }
    }

    if (that.displayName !== null) {
      for (let i = 0; i < that.displayName.length; i++) {
        enhanceNonRecursively(that.displayName[i], that, ["displayName", i]);

        this.visit(that.displayName[i]);
      }
    }

    if (that.description !== null) {
      for (let i = 0; i < that.description.length; i++) {
        enhanceNonRecursively(that.description[i], that, ["description", i]);

        this.visit(that.description[i]);
      }
    }

    if (that.administration !== null) {
      enhanceNonRecursively(that.administration, that, ["administration"]);
      this.visit(that.administration);
    }

    if (that.embeddedDataSpecifications !== null) {
      for (let i = 0; i < that.embeddedDataSpecifications.length; i++) {
        enhanceNonRecursively(that.embeddedDataSpecifications[i], that, [
          "embeddedDataSpecifications",
          i,
        ]);

        this.visit(that.embeddedDataSpecifications[i]);
      }
    }

    if (that.isCaseOf !== null) {
      for (let i = 0; i < that.isCaseOf.length; i++) {
        enhanceNonRecursively(that.isCaseOf[i], that, ["isCaseOf", i]);

        this.visit(that.isCaseOf[i]);
      }
    }
  }

  override visitReference(that: aas.types.Reference): void {
    if (that.referredSemanticId !== null) {
      enhanceNonRecursively(that.referredSemanticId, that, [
        "referredSemanticId",
      ]);
      this.visit(that.referredSemanticId);
    }

    for (let i = 0; i < that.keys.length; i++) {
      enhanceNonRecursively(that.keys[i], that, ["keys", i]);

      this.visit(that.keys[i]);
    }
  }

  override visitKey(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    that: aas.types.Key
  ): void {
    // No further recursion possible.
  }

  override visitLangString(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    that: aas.types.LangString
  ): void {
    // No further recursion possible.
  }

  override visitEnvironment(that: aas.types.Environment): void {
    if (that.assetAdministrationShells !== null) {
      for (let i = 0; i < that.assetAdministrationShells.length; i++) {
        enhanceNonRecursively(that.assetAdministrationShells[i], that, [
          "assetAdministrationShells",
          i,
        ]);

        this.visit(that.assetAdministrationShells[i]);
      }
    }

    if (that.submodels !== null) {
      for (let i = 0; i < that.submodels.length; i++) {
        enhanceNonRecursively(that.submodels[i], that, ["submodels", i]);

        this.visit(that.submodels[i]);
      }
    }

    if (that.conceptDescriptions !== null) {
      for (let i = 0; i < that.conceptDescriptions.length; i++) {
        enhanceNonRecursively(that.conceptDescriptions[i], that, [
          "conceptDescriptions",
          i,
        ]);

        this.visit(that.conceptDescriptions[i]);
      }
    }
  }

  override visitEmbeddedDataSpecification(
    that: aas.types.EmbeddedDataSpecification
  ): void {
    enhanceNonRecursively(that.dataSpecification, that, ["dataSpecification"]);
    this.visit(that.dataSpecification);

    enhanceNonRecursively(that.dataSpecificationContent, that, [
      "dataSpecificationContent",
    ]);
    this.visit(that.dataSpecificationContent);
  }

  override visitValueReferencePair(that: aas.types.ValueReferencePair): void {
    enhanceNonRecursively(that.valueId, that, ["valueId"]);
    this.visit(that.valueId);
  }

  override visitValueList(that: aas.types.ValueList): void {
    for (let i = 0; i < that.valueReferencePairs.length; i++) {
      enhanceNonRecursively(that.valueReferencePairs[i], that, [
        "valueReferencePairs",
        i,
      ]);

      this.visit(that.valueReferencePairs[i]);
    }
  }

  override visitDataSpecificationIec61360(
    that: aas.types.DataSpecificationIec61360
  ): void {
    for (let i = 0; i < that.preferredName.length; i++) {
      enhanceNonRecursively(that.preferredName[i], that, ["preferredName", i]);

      this.visit(that.preferredName[i]);
    }

    if (that.shortName !== null) {
      for (let i = 0; i < that.shortName.length; i++) {
        enhanceNonRecursively(that.shortName[i], that, ["shortName", i]);

        this.visit(that.shortName[i]);
      }
    }

    if (that.unitId !== null) {
      enhanceNonRecursively(that.unitId, that, ["unitId"]);
      this.visit(that.unitId);
    }

    if (that.definition !== null) {
      for (let i = 0; i < that.definition.length; i++) {
        enhanceNonRecursively(that.definition[i], that, ["definition", i]);

        this.visit(that.definition[i]);
      }
    }

    if (that.valueList !== null) {
      enhanceNonRecursively(that.valueList, that, ["valueList"]);
      this.visit(that.valueList);
    }
  }

  override visitDataSpecificationPhysicalUnit(
    that: aas.types.DataSpecificationPhysicalUnit
  ): void {
    for (let i = 0; i < that.definition.length; i++) {
      enhanceNonRecursively(that.definition[i], that, ["definition", i]);

      this.visit(that.definition[i]);
    }
  }
}

const DESCENDANT_ENHANCER = new DescendantEnhancer();

/**
 * Enhance the `instance` in-place and recursively.
 *
 * @param instance AAS instance to be enhanced
 * @param parent of the `instance`
 * @param relativePathFromParent path segments relative to the parent
 * @return enhanced `instance`
 */
export function enhance<ClassT extends aas.types.Class>(
  instance: ClassT,
  parent: aas.types.Class | null,
  relativePathFromParent: Array<number | string>
): Enhanced<ClassT> {
  if (parent === null && relativePathFromParent.length != 0) {
    console.error(
      "When enhancing, you specified parent as null, " +
        "but the relative path to parent is not empty",
      relativePathFromParent
    );
    throw new Error("Assertion violation");
  }

  enhanceNonRecursively(instance, parent, relativePathFromParent);
  DESCENDANT_ENHANCER.visit(instance);

  return instance as Enhanced<ClassT>;
}
