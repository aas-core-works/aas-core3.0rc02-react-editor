//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.Reference|Reference}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";

import * as fields from '../fields';
import * as help from './help.generated';
import * as newinstancing from '../../newinstancing.generated';

export function ReferenceFields(
  props: {
    snapInstance: Readonly<aas.types.Reference>,
    instance: aas.types.Reference,
  }
) {
  return (
    <>
      <fields.EnumerationFieldRequired
        label="Type"
        helpUrl={
          `${help.ROOT_URL}/Reference.html#property-type`
        }
        getLiterals={aas.types.overReferenceTypes}
        literalToString={aas.stringification.mustReferenceTypesToString}
        selected={props.snapInstance.type}
        onChange={
          (value) => {
            props.instance.type = value;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Referred semantic id"
        helpUrl={
          `${help.ROOT_URL}/Reference.html#property-referred_semantic_id`
        }
        parent={props.instance}
        property="referredSemanticId"
        snapInstance={
          props.snapInstance.referredSemanticId
        }
        instance={
          props.instance.referredSemanticId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.referredSemanticId = instance;
          }
        }
      />

      <fields.ListFieldRequired<aas.types.Key>
        label="Keys"
        helpUrl={
          `${help.ROOT_URL}/Reference.html#property-keys`
        }
        parent={props.instance}
        property="keys"
        newInstanceDefinitions={
          newinstancing.FOR_KEY
        }
        snapItems={
          props.snapInstance.keys
        }
        items={
          props.instance.keys
        }
        setItems={
          (items) => {
            props.instance.keys = items;
          }
        }
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
