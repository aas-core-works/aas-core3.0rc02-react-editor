//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.AssetInformation|AssetInformation}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";
import * as valtio from "valtio";

import * as enhancing from "../../enhancing.generated";
import * as fields from "../fields";
import * as help from "./help.generated";
import * as model from "../../model";
import * as newinstancing from "../../newinstancing.generated";
import * as verification from "../../verification";
import * as widgets from "../widgets";

export function AssetInformationFields(
  props: {
    snapInstance: Readonly<aas.types.AssetInformation>,
    instance: aas.types.AssetInformation,
  }
) {
  const [instanceErrors, setInstanceErrors] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForAssetKind, setErrorsForAssetKind] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const snapErrorSetVersioning = valtio.useSnapshot(
    model.getErrorSet(props.instance).versioning
  );

  React.useEffect(
    () => {
      const [
        anotherInstanceErrors,
        errorsByProperty
      ] = verification.categorizeInstanceErrors(
        model.getErrorSet(props.instance)
      );

      setInstanceErrors(anotherInstanceErrors);

      const anotherErrorsForAssetKind =
        errorsByProperty.get("assetKind");
      setErrorsForAssetKind(
        anotherErrorsForAssetKind === undefined
          ? null
          : anotherErrorsForAssetKind
      );
    },
    [
      snapErrorSetVersioning,
      props.instance
    ]
  );
  return (
    <>
    <widgets.LocalErrors errors={instanceErrors} />
      <fields.EnumerationFieldRequired
        label="Asset kind"
        helpUrl={
          `${help.ROOT_URL}/Asset_information.html#property-asset_kind`
        }
        getLiterals={aas.types.overAssetKind}
        literalToString={aas.stringification.mustAssetKindToString}
        selected={props.snapInstance.assetKind}
        onChange={
          (value) => {
            props.instance.assetKind = value;
          }
        }
        errors={errorsForAssetKind}
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Global asset id"
        helpUrl={
          `${help.ROOT_URL}/Asset_information.html#property-global_asset_id`
        }
        parent={props.instance}
        property="globalAssetId"
        snapInstance={
          props.snapInstance.globalAssetId
        }
        instance={
          props.instance.globalAssetId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.globalAssetId = instance;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.SpecificAssetId>
        label="Specific asset ids"
        helpUrl={
          `${help.ROOT_URL}/Asset_information.html#property-specific_asset_ids`
        }
        parent={props.instance}
        property="specificAssetIds"
        newInstanceDefinitions={
          newinstancing.FOR_SPECIFIC_ASSET_ID
        }
        snapItems={
          props.snapInstance.specificAssetIds
        }
        items={
          props.instance.specificAssetIds
        }
        setItems={
          (items) => {
            props.instance.specificAssetIds = items;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Resource>
        label="Default thumbnail"
        helpUrl={
          `${help.ROOT_URL}/Asset_information.html#property-default_thumbnail`
        }
        parent={props.instance}
        property="defaultThumbnail"
        snapInstance={
          props.snapInstance.defaultThumbnail
        }
        instance={
          props.instance.defaultThumbnail
        }
        newInstanceDefinitions={
          newinstancing.FOR_RESOURCE
        }
        setInstance={
          (instance) => {
            props.instance.defaultThumbnail = instance;
          }
        }
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
