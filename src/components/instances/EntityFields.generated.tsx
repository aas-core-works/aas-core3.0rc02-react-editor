//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.Entity|Entity}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";

import * as fields from '../fields';
import * as help from './help.generated';
import * as newinstancing from '../../newinstancing.generated';

export function EntityFields(
  props: {
    snapInstance: Readonly<aas.types.Entity>,
    instance: aas.types.Entity,
  }
) {
  return (
    <>
      <fields.ListFieldOptional<aas.types.Extension>
        label="Extensions"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-extensions`
        }
        parent={props.instance}
        property="extensions"
        newInstanceDefinitions={
          newinstancing.FOR_EXTENSION
        }
        snapItems={
          props.snapInstance.extensions
        }
        items={
          props.instance.extensions
        }
        setItems={
          (items) => {
            props.instance.extensions = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Category"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-category`
        }
        value={props.snapInstance.category}
        onChange={
          (value) => {
            props.instance.category = value;
          }
        }
      />

      <fields.TextFieldOptional
        label="Id short"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-id_short`
        }
        value={props.snapInstance.idShort}
        onChange={
          (value) => {
            props.instance.idShort = value;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Display name"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-display_name`
        }
        parent={props.instance}
        property="displayName"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.displayName
        }
        items={
          props.instance.displayName
        }
        setItems={
          (items) => {
            props.instance.displayName = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Description"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-description`
        }
        parent={props.instance}
        property="description"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.description
        }
        items={
          props.instance.description
        }
        setItems={
          (items) => {
            props.instance.description = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Checksum"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-checksum`
        }
        value={props.snapInstance.checksum}
        onChange={
          (value) => {
            props.instance.checksum = value;
          }
        }
      />

      <fields.EnumerationFieldOptional
        label="Kind"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-kind`
        }
        getLiterals={aas.types.overModelingKind}
        literalToString={aas.stringification.mustModelingKindToString}
        selected={props.snapInstance.kind}
        onChange={
          (value) => {
            props.instance.kind = value;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Semantic id"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-semantic_id`
        }
        parent={props.instance}
        property="semanticId"
        snapInstance={
          props.snapInstance.semanticId
        }
        instance={
          props.instance.semanticId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.semanticId = instance;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.Reference>
        label="Supplemental semantic ids"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-supplemental_semantic_ids`
        }
        parent={props.instance}
        property="supplementalSemanticIds"
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        snapItems={
          props.snapInstance.supplementalSemanticIds
        }
        items={
          props.instance.supplementalSemanticIds
        }
        setItems={
          (items) => {
            props.instance.supplementalSemanticIds = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.Qualifier>
        label="Qualifiers"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-qualifiers`
        }
        parent={props.instance}
        property="qualifiers"
        newInstanceDefinitions={
          newinstancing.FOR_QUALIFIER
        }
        snapItems={
          props.snapInstance.qualifiers
        }
        items={
          props.instance.qualifiers
        }
        setItems={
          (items) => {
            props.instance.qualifiers = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.EmbeddedDataSpecification>
        label="Embedded data specifications"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-embedded_data_specifications`
        }
        parent={props.instance}
        property="embeddedDataSpecifications"
        newInstanceDefinitions={
          newinstancing.FOR_EMBEDDED_DATA_SPECIFICATION
        }
        snapItems={
          props.snapInstance.embeddedDataSpecifications
        }
        items={
          props.instance.embeddedDataSpecifications
        }
        setItems={
          (items) => {
            props.instance.embeddedDataSpecifications = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.ISubmodelElement>
        label="Statements"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-statements`
        }
        parent={props.instance}
        property="statements"
        newInstanceDefinitions={
          newinstancing.FOR_SUBMODEL_ELEMENT
        }
        snapItems={
          props.snapInstance.statements
        }
        items={
          props.instance.statements
        }
        setItems={
          (items) => {
            props.instance.statements = items;
          }
        }
      />

      <fields.EnumerationFieldRequired
        label="Entity type"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-entity_type`
        }
        getLiterals={aas.types.overEntityType}
        literalToString={aas.stringification.mustEntityTypeToString}
        selected={props.snapInstance.entityType}
        onChange={
          (value) => {
            props.instance.entityType = value;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Global asset id"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-global_asset_id`
        }
        parent={props.instance}
        property="globalAssetId"
        snapInstance={
          props.snapInstance.globalAssetId
        }
        instance={
          props.instance.globalAssetId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.globalAssetId = instance;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.SpecificAssetId>
        label="Specific asset id"
        helpUrl={
          `${help.ROOT_URL}/Entity.html#property-specific_asset_id`
        }
        parent={props.instance}
        property="specificAssetId"
        snapInstance={
          props.snapInstance.specificAssetId
        }
        instance={
          props.instance.specificAssetId
        }
        newInstanceDefinitions={
          newinstancing.FOR_SPECIFIC_ASSET_ID
        }
        setInstance={
          (instance) => {
            props.instance.specificAssetId = instance;
          }
        }
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
