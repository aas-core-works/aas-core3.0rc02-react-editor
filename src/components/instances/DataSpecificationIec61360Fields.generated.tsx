//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.DataSpecificationIec61360|DataSpecificationIec61360}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";
import * as valtio from "valtio";

import * as enhancing from "../../enhancing.generated";
import * as fields from "../fields";
import * as help from "./help.generated";
import * as model from "../../model";
import * as newinstancing from "../../newinstancing.generated";
import * as verification from "../../verification";
import * as widgets from "../widgets";

export function DataSpecificationIec61360Fields(
  props: {
    snapInstance: Readonly<aas.types.DataSpecificationIec61360>,
    instance: aas.types.DataSpecificationIec61360,
  }
) {
  const [instanceErrors, setInstanceErrors] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForUnit, setErrorsForUnit] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForSourceOfDefinition, setErrorsForSourceOfDefinition] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForSymbol, setErrorsForSymbol] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForDataType, setErrorsForDataType] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForValueFormat, setErrorsForValueFormat] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForValue, setErrorsForValue] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForLevelType, setErrorsForLevelType] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const snapErrorSetVersioning = valtio.useSnapshot(
    model.getErrorSet(props.instance).versioning
  );

  React.useEffect(
    () => {
      const [
        anotherInstanceErrors,
        errorsByProperty
      ] = verification.categorizeInstanceErrors(
        model.getErrorSet(props.instance)
      );

      setInstanceErrors(anotherInstanceErrors);

      const anotherErrorsForUnit =
        errorsByProperty.get("unit");
      setErrorsForUnit(
        anotherErrorsForUnit === undefined
          ? null
          : anotherErrorsForUnit
      );

      const anotherErrorsForSourceOfDefinition =
        errorsByProperty.get("sourceOfDefinition");
      setErrorsForSourceOfDefinition(
        anotherErrorsForSourceOfDefinition === undefined
          ? null
          : anotherErrorsForSourceOfDefinition
      );

      const anotherErrorsForSymbol =
        errorsByProperty.get("symbol");
      setErrorsForSymbol(
        anotherErrorsForSymbol === undefined
          ? null
          : anotherErrorsForSymbol
      );

      const anotherErrorsForDataType =
        errorsByProperty.get("dataType");
      setErrorsForDataType(
        anotherErrorsForDataType === undefined
          ? null
          : anotherErrorsForDataType
      );

      const anotherErrorsForValueFormat =
        errorsByProperty.get("valueFormat");
      setErrorsForValueFormat(
        anotherErrorsForValueFormat === undefined
          ? null
          : anotherErrorsForValueFormat
      );

      const anotherErrorsForValue =
        errorsByProperty.get("value");
      setErrorsForValue(
        anotherErrorsForValue === undefined
          ? null
          : anotherErrorsForValue
      );

      const anotherErrorsForLevelType =
        errorsByProperty.get("levelType");
      setErrorsForLevelType(
        anotherErrorsForLevelType === undefined
          ? null
          : anotherErrorsForLevelType
      );
    },
    [
      snapErrorSetVersioning,
      props.instance
    ]
  );
  return (
    <>
    <widgets.LocalErrors errors={instanceErrors} />
      <fields.ListFieldRequired<aas.types.LangString>
        label="Preferred name"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-preferred_name`
        }
        parent={props.instance}
        property="preferredName"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.preferredName
        }
        items={
          props.instance.preferredName
        }
        setItems={
          (items) => {
            props.instance.preferredName = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Short name"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-short_name`
        }
        parent={props.instance}
        property="shortName"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.shortName
        }
        items={
          props.instance.shortName
        }
        setItems={
          (items) => {
            props.instance.shortName = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Unit"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-unit`
        }
        value={props.snapInstance.unit}
        onChange={
          (value) => {
            props.instance.unit = value;
          }
        }
        errors={errorsForUnit}
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Unit id"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-unit_id`
        }
        parent={props.instance}
        property="unitId"
        snapInstance={
          props.snapInstance.unitId
        }
        instance={
          props.instance.unitId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.unitId = instance;
          }
        }
      />

      <fields.TextFieldOptional
        label="Source of definition"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-source_of_definition`
        }
        value={props.snapInstance.sourceOfDefinition}
        onChange={
          (value) => {
            props.instance.sourceOfDefinition = value;
          }
        }
        errors={errorsForSourceOfDefinition}
      />

      <fields.TextFieldOptional
        label="Symbol"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-symbol`
        }
        value={props.snapInstance.symbol}
        onChange={
          (value) => {
            props.instance.symbol = value;
          }
        }
        errors={errorsForSymbol}
      />

      <fields.EnumerationFieldOptional
        label="Data type"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-data_type`
        }
        getLiterals={aas.types.overDataTypeIec61360}
        literalToString={aas.stringification.mustDataTypeIec61360ToString}
        selected={props.snapInstance.dataType}
        onChange={
          (value) => {
            props.instance.dataType = value;
          }
        }
        errors={errorsForDataType}
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Definition"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-definition`
        }
        parent={props.instance}
        property="definition"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.definition
        }
        items={
          props.instance.definition
        }
        setItems={
          (items) => {
            props.instance.definition = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Value format"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-value_format`
        }
        value={props.snapInstance.valueFormat}
        onChange={
          (value) => {
            props.instance.valueFormat = value;
          }
        }
        errors={errorsForValueFormat}
      />

      <fields.EmbeddedInstanceOptional<aas.types.ValueList>
        label="Value list"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-value_list`
        }
        parent={props.instance}
        property="valueList"
        snapInstance={
          props.snapInstance.valueList
        }
        instance={
          props.instance.valueList
        }
        newInstanceDefinitions={
          newinstancing.FOR_VALUE_LIST
        }
        setInstance={
          (instance) => {
            props.instance.valueList = instance;
          }
        }
      />

      <fields.TextFieldOptional
        label="Value"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-value`
        }
        value={props.snapInstance.value}
        onChange={
          (value) => {
            props.instance.value = value;
          }
        }
        errors={errorsForValue}
      />

      <fields.EnumerationFieldOptional
        label="Level type"
        helpUrl={
          `${help.ROOT_URL}/Data_specification_IEC_61360.html#property-level_type`
        }
        getLiterals={aas.types.overLevelType}
        literalToString={aas.stringification.mustLevelTypeToString}
        selected={props.snapInstance.levelType}
        onChange={
          (value) => {
            props.instance.levelType = value;
          }
        }
        errors={errorsForLevelType}
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
