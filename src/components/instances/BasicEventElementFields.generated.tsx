//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.BasicEventElement|BasicEventElement}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";
import * as valtio from "valtio";

import * as enhancing from "../../enhancing.generated";
import * as fields from "../fields";
import * as help from "./help.generated";
import * as model from "../../model";
import * as newinstancing from "../../newinstancing.generated";
import * as verification from "../../verification";
import * as widgets from "../widgets";

export function BasicEventElementFields(
  props: {
    snapInstance: Readonly<aas.types.BasicEventElement>,
    instance: aas.types.BasicEventElement,
  }
) {
  const [instanceErrors, setInstanceErrors] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForCategory, setErrorsForCategory] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForIdShort, setErrorsForIdShort] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForChecksum, setErrorsForChecksum] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForKind, setErrorsForKind] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForDirection, setErrorsForDirection] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForState, setErrorsForState] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForMessageTopic, setErrorsForMessageTopic] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForLastUpdate, setErrorsForLastUpdate] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForMinInterval, setErrorsForMinInterval] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForMaxInterval, setErrorsForMaxInterval] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const snapErrorSetVersioning = valtio.useSnapshot(
    model.getErrorSet(props.instance).versioning
  );

  React.useEffect(
    () => {
      const [
        anotherInstanceErrors,
        errorsByProperty
      ] = verification.categorizeInstanceErrors(
        model.getErrorSet(props.instance)
      );

      setInstanceErrors(anotherInstanceErrors);

      const anotherErrorsForCategory =
        errorsByProperty.get("category");
      setErrorsForCategory(
        anotherErrorsForCategory === undefined
          ? null
          : anotherErrorsForCategory
      );

      const anotherErrorsForIdShort =
        errorsByProperty.get("idShort");
      setErrorsForIdShort(
        anotherErrorsForIdShort === undefined
          ? null
          : anotherErrorsForIdShort
      );

      const anotherErrorsForChecksum =
        errorsByProperty.get("checksum");
      setErrorsForChecksum(
        anotherErrorsForChecksum === undefined
          ? null
          : anotherErrorsForChecksum
      );

      const anotherErrorsForKind =
        errorsByProperty.get("kind");
      setErrorsForKind(
        anotherErrorsForKind === undefined
          ? null
          : anotherErrorsForKind
      );

      const anotherErrorsForDirection =
        errorsByProperty.get("direction");
      setErrorsForDirection(
        anotherErrorsForDirection === undefined
          ? null
          : anotherErrorsForDirection
      );

      const anotherErrorsForState =
        errorsByProperty.get("state");
      setErrorsForState(
        anotherErrorsForState === undefined
          ? null
          : anotherErrorsForState
      );

      const anotherErrorsForMessageTopic =
        errorsByProperty.get("messageTopic");
      setErrorsForMessageTopic(
        anotherErrorsForMessageTopic === undefined
          ? null
          : anotherErrorsForMessageTopic
      );

      const anotherErrorsForLastUpdate =
        errorsByProperty.get("lastUpdate");
      setErrorsForLastUpdate(
        anotherErrorsForLastUpdate === undefined
          ? null
          : anotherErrorsForLastUpdate
      );

      const anotherErrorsForMinInterval =
        errorsByProperty.get("minInterval");
      setErrorsForMinInterval(
        anotherErrorsForMinInterval === undefined
          ? null
          : anotherErrorsForMinInterval
      );

      const anotherErrorsForMaxInterval =
        errorsByProperty.get("maxInterval");
      setErrorsForMaxInterval(
        anotherErrorsForMaxInterval === undefined
          ? null
          : anotherErrorsForMaxInterval
      );
    },
    [
      snapErrorSetVersioning,
      props.instance
    ]
  );
  return (
    <>
    <widgets.LocalErrors errors={instanceErrors} />
      <fields.ListFieldOptional<aas.types.Extension>
        label="Extensions"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-extensions`
        }
        parent={props.instance}
        property="extensions"
        newInstanceDefinitions={
          newinstancing.FOR_EXTENSION
        }
        snapItems={
          props.snapInstance.extensions
        }
        items={
          props.instance.extensions
        }
        setItems={
          (items) => {
            props.instance.extensions = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Category"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-category`
        }
        value={props.snapInstance.category}
        onChange={
          (value) => {
            props.instance.category = value;
          }
        }
        errors={errorsForCategory}
      />

      <fields.TextFieldOptional
        label="Id short"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-id_short`
        }
        value={props.snapInstance.idShort}
        onChange={
          (value) => {
            props.instance.idShort = value;
          }
        }
        errors={errorsForIdShort}
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Display name"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-display_name`
        }
        parent={props.instance}
        property="displayName"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.displayName
        }
        items={
          props.instance.displayName
        }
        setItems={
          (items) => {
            props.instance.displayName = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Description"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-description`
        }
        parent={props.instance}
        property="description"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.description
        }
        items={
          props.instance.description
        }
        setItems={
          (items) => {
            props.instance.description = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Checksum"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-checksum`
        }
        value={props.snapInstance.checksum}
        onChange={
          (value) => {
            props.instance.checksum = value;
          }
        }
        errors={errorsForChecksum}
      />

      <fields.EnumerationFieldOptional
        label="Kind"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-kind`
        }
        getLiterals={aas.types.overModelingKind}
        literalToString={aas.stringification.mustModelingKindToString}
        selected={props.snapInstance.kind}
        onChange={
          (value) => {
            props.instance.kind = value;
          }
        }
        errors={errorsForKind}
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Semantic id"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-semantic_id`
        }
        parent={props.instance}
        property="semanticId"
        snapInstance={
          props.snapInstance.semanticId
        }
        instance={
          props.instance.semanticId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.semanticId = instance;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.Reference>
        label="Supplemental semantic ids"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-supplemental_semantic_ids`
        }
        parent={props.instance}
        property="supplementalSemanticIds"
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        snapItems={
          props.snapInstance.supplementalSemanticIds
        }
        items={
          props.instance.supplementalSemanticIds
        }
        setItems={
          (items) => {
            props.instance.supplementalSemanticIds = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.Qualifier>
        label="Qualifiers"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-qualifiers`
        }
        parent={props.instance}
        property="qualifiers"
        newInstanceDefinitions={
          newinstancing.FOR_QUALIFIER
        }
        snapItems={
          props.snapInstance.qualifiers
        }
        items={
          props.instance.qualifiers
        }
        setItems={
          (items) => {
            props.instance.qualifiers = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.EmbeddedDataSpecification>
        label="Embedded data specifications"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-embedded_data_specifications`
        }
        parent={props.instance}
        property="embeddedDataSpecifications"
        newInstanceDefinitions={
          newinstancing.FOR_EMBEDDED_DATA_SPECIFICATION
        }
        snapItems={
          props.snapInstance.embeddedDataSpecifications
        }
        items={
          props.instance.embeddedDataSpecifications
        }
        setItems={
          (items) => {
            props.instance.embeddedDataSpecifications = items;
          }
        }
      />

      <fields.EmbeddedInstanceRequired<aas.types.Reference>
        label="Observed"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-observed`
        }
        parent={props.instance}
        property="observed"
        snapInstance={
          props.snapInstance.observed
        }
        instance={
          props.instance.observed
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.observed = instance;
          }
        }
      />

      <fields.EnumerationFieldRequired
        label="Direction"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-direction`
        }
        getLiterals={aas.types.overDirection}
        literalToString={aas.stringification.mustDirectionToString}
        selected={props.snapInstance.direction}
        onChange={
          (value) => {
            props.instance.direction = value;
          }
        }
        errors={errorsForDirection}
      />

      <fields.EnumerationFieldRequired
        label="State"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-state`
        }
        getLiterals={aas.types.overStateOfEvent}
        literalToString={aas.stringification.mustStateOfEventToString}
        selected={props.snapInstance.state}
        onChange={
          (value) => {
            props.instance.state = value;
          }
        }
        errors={errorsForState}
      />

      <fields.TextFieldOptional
        label="Message topic"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-message_topic`
        }
        value={props.snapInstance.messageTopic}
        onChange={
          (value) => {
            props.instance.messageTopic = value;
          }
        }
        errors={errorsForMessageTopic}
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Message broker"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-message_broker`
        }
        parent={props.instance}
        property="messageBroker"
        snapInstance={
          props.snapInstance.messageBroker
        }
        instance={
          props.instance.messageBroker
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.messageBroker = instance;
          }
        }
      />

      <fields.TextFieldOptional
        label="Last update"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-last_update`
        }
        value={props.snapInstance.lastUpdate}
        onChange={
          (value) => {
            props.instance.lastUpdate = value;
          }
        }
        errors={errorsForLastUpdate}
      />

      <fields.TextFieldOptional
        label="Min interval"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-min_interval`
        }
        value={props.snapInstance.minInterval}
        onChange={
          (value) => {
            props.instance.minInterval = value;
          }
        }
        errors={errorsForMinInterval}
      />

      <fields.TextFieldOptional
        label="Max interval"
        helpUrl={
          `${help.ROOT_URL}/Basic_event_element.html#property-max_interval`
        }
        value={props.snapInstance.maxInterval}
        onChange={
          (value) => {
            props.instance.maxInterval = value;
          }
        }
        errors={errorsForMaxInterval}
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
