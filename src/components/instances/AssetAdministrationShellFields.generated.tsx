//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.AssetAdministrationShell|AssetAdministrationShell}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";
import * as valtio from "valtio";

import * as enhancing from "../../enhancing.generated";
import * as fields from "../fields";
import * as help from "./help.generated";
import * as model from "../../model";
import * as newinstancing from "../../newinstancing.generated";
import * as verification from "../../verification";
import * as widgets from "../widgets";

export function AssetAdministrationShellFields(
  props: {
    snapInstance: Readonly<aas.types.AssetAdministrationShell>,
    instance: aas.types.AssetAdministrationShell,
  }
) {
  const [instanceErrors, setInstanceErrors] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForCategory, setErrorsForCategory] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForIdShort, setErrorsForIdShort] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForChecksum, setErrorsForChecksum] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForId, setErrorsForId] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const snapErrorSetVersioning = valtio.useSnapshot(
    model.getErrorSet(props.instance).versioning
  );

  React.useEffect(
    () => {
      const [
        anotherInstanceErrors,
        errorsByProperty
      ] = verification.categorizeInstanceErrors(
        model.getErrorSet(props.instance)
      );

      setInstanceErrors(anotherInstanceErrors);

      const anotherErrorsForCategory =
        errorsByProperty.get("category");
      setErrorsForCategory(
        anotherErrorsForCategory === undefined
          ? null
          : anotherErrorsForCategory
      );

      const anotherErrorsForIdShort =
        errorsByProperty.get("idShort");
      setErrorsForIdShort(
        anotherErrorsForIdShort === undefined
          ? null
          : anotherErrorsForIdShort
      );

      const anotherErrorsForChecksum =
        errorsByProperty.get("checksum");
      setErrorsForChecksum(
        anotherErrorsForChecksum === undefined
          ? null
          : anotherErrorsForChecksum
      );

      const anotherErrorsForId =
        errorsByProperty.get("id");
      setErrorsForId(
        anotherErrorsForId === undefined
          ? null
          : anotherErrorsForId
      );
    },
    [
      snapErrorSetVersioning,
      props.instance
    ]
  );
  return (
    <>
    <widgets.LocalErrors errors={instanceErrors} />
      <fields.ListFieldOptional<aas.types.Extension>
        label="Extensions"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-extensions`
        }
        parent={props.instance}
        property="extensions"
        newInstanceDefinitions={
          newinstancing.FOR_EXTENSION
        }
        snapItems={
          props.snapInstance.extensions
        }
        items={
          props.instance.extensions
        }
        setItems={
          (items) => {
            props.instance.extensions = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Category"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-category`
        }
        value={props.snapInstance.category}
        onChange={
          (value) => {
            props.instance.category = value;
          }
        }
        errors={errorsForCategory}
      />

      <fields.TextFieldOptional
        label="Id short"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-id_short`
        }
        value={props.snapInstance.idShort}
        onChange={
          (value) => {
            props.instance.idShort = value;
          }
        }
        errors={errorsForIdShort}
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Display name"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-display_name`
        }
        parent={props.instance}
        property="displayName"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.displayName
        }
        items={
          props.instance.displayName
        }
        setItems={
          (items) => {
            props.instance.displayName = items;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.LangString>
        label="Description"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-description`
        }
        parent={props.instance}
        property="description"
        newInstanceDefinitions={
          newinstancing.FOR_LANG_STRING
        }
        snapItems={
          props.snapInstance.description
        }
        items={
          props.instance.description
        }
        setItems={
          (items) => {
            props.instance.description = items;
          }
        }
      />

      <fields.TextFieldOptional
        label="Checksum"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-checksum`
        }
        value={props.snapInstance.checksum}
        onChange={
          (value) => {
            props.instance.checksum = value;
          }
        }
        errors={errorsForChecksum}
      />

      <fields.EmbeddedInstanceOptional<aas.types.AdministrativeInformation>
        label="Administration"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-administration`
        }
        parent={props.instance}
        property="administration"
        snapInstance={
          props.snapInstance.administration
        }
        instance={
          props.instance.administration
        }
        newInstanceDefinitions={
          newinstancing.FOR_ADMINISTRATIVE_INFORMATION
        }
        setInstance={
          (instance) => {
            props.instance.administration = instance;
          }
        }
      />

      <fields.TextFieldRequired
        label="Id"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-id`
        }
        value={props.snapInstance.id}
        onChange={
          (value) => {
            props.instance.id = value;
          }
        }
        errors={errorsForId}
      />

      <fields.ListFieldOptional<aas.types.EmbeddedDataSpecification>
        label="Embedded data specifications"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-embedded_data_specifications`
        }
        parent={props.instance}
        property="embeddedDataSpecifications"
        newInstanceDefinitions={
          newinstancing.FOR_EMBEDDED_DATA_SPECIFICATION
        }
        snapItems={
          props.snapInstance.embeddedDataSpecifications
        }
        items={
          props.instance.embeddedDataSpecifications
        }
        setItems={
          (items) => {
            props.instance.embeddedDataSpecifications = items;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Derived from"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-derived_from`
        }
        parent={props.instance}
        property="derivedFrom"
        snapInstance={
          props.snapInstance.derivedFrom
        }
        instance={
          props.instance.derivedFrom
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.derivedFrom = instance;
          }
        }
      />

      <fields.EmbeddedInstanceRequired<aas.types.AssetInformation>
        label="Asset information"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-asset_information`
        }
        parent={props.instance}
        property="assetInformation"
        snapInstance={
          props.snapInstance.assetInformation
        }
        instance={
          props.instance.assetInformation
        }
        newInstanceDefinitions={
          newinstancing.FOR_ASSET_INFORMATION
        }
        setInstance={
          (instance) => {
            props.instance.assetInformation = instance;
          }
        }
      />

      <fields.ListFieldOptional<aas.types.Reference>
        label="Submodels"
        helpUrl={
          `${help.ROOT_URL}/Asset_administration_shell.html#property-submodels`
        }
        parent={props.instance}
        property="submodels"
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        snapItems={
          props.snapInstance.submodels
        }
        items={
          props.instance.submodels
        }
        setItems={
          (items) => {
            props.instance.submodels = items;
          }
        }
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
