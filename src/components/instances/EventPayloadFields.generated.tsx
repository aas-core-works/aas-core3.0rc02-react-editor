//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

/**
 * Define a component with fields corresponding to properties of
 * {@link @aas-core-works/aas-core3.0rc02-typescript#types.EventPayload|EventPayload}.
 */

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";
import * as React from "react";
import * as valtio from "valtio";

import * as enhancing from "../../enhancing.generated";
import * as fields from "../fields";
import * as help from "./help.generated";
import * as model from "../../model";
import * as newinstancing from "../../newinstancing.generated";
import * as verification from "../../verification";
import * as widgets from "../widgets";

export function EventPayloadFields(
  props: {
    snapInstance: Readonly<aas.types.EventPayload>,
    instance: aas.types.EventPayload,
  }
) {
  const [instanceErrors, setInstanceErrors] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForTopic, setErrorsForTopic] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForTimeStamp, setErrorsForTimeStamp] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const [errorsForPayload, setErrorsForPayload] = React.useState<
    Array<enhancing.TimestampedError> | null>(null);

  const snapErrorSetVersioning = valtio.useSnapshot(
    model.getErrorSet(props.instance).versioning
  );

  React.useEffect(
    () => {
      const [
        anotherInstanceErrors,
        errorsByProperty
      ] = verification.categorizeInstanceErrors(
        model.getErrorSet(props.instance)
      );

      setInstanceErrors(anotherInstanceErrors);

      const anotherErrorsForTopic =
        errorsByProperty.get("topic");
      setErrorsForTopic(
        anotherErrorsForTopic === undefined
          ? null
          : anotherErrorsForTopic
      );

      const anotherErrorsForTimeStamp =
        errorsByProperty.get("timeStamp");
      setErrorsForTimeStamp(
        anotherErrorsForTimeStamp === undefined
          ? null
          : anotherErrorsForTimeStamp
      );

      const anotherErrorsForPayload =
        errorsByProperty.get("payload");
      setErrorsForPayload(
        anotherErrorsForPayload === undefined
          ? null
          : anotherErrorsForPayload
      );
    },
    [
      snapErrorSetVersioning,
      props.instance
    ]
  );
  return (
    <>
    <widgets.LocalErrors errors={instanceErrors} />
      <fields.EmbeddedInstanceRequired<aas.types.Reference>
        label="Source"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-source`
        }
        parent={props.instance}
        property="source"
        snapInstance={
          props.snapInstance.source
        }
        instance={
          props.instance.source
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.source = instance;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Source semantic id"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-source_semantic_id`
        }
        parent={props.instance}
        property="sourceSemanticId"
        snapInstance={
          props.snapInstance.sourceSemanticId
        }
        instance={
          props.instance.sourceSemanticId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.sourceSemanticId = instance;
          }
        }
      />

      <fields.EmbeddedInstanceRequired<aas.types.Reference>
        label="Observable reference"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-observable_reference`
        }
        parent={props.instance}
        property="observableReference"
        snapInstance={
          props.snapInstance.observableReference
        }
        instance={
          props.instance.observableReference
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.observableReference = instance;
          }
        }
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Observable semantic id"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-observable_semantic_id`
        }
        parent={props.instance}
        property="observableSemanticId"
        snapInstance={
          props.snapInstance.observableSemanticId
        }
        instance={
          props.instance.observableSemanticId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.observableSemanticId = instance;
          }
        }
      />

      <fields.TextFieldOptional
        label="Topic"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-topic`
        }
        value={props.snapInstance.topic}
        onChange={
          (value) => {
            props.instance.topic = value;
          }
        }
        errors={errorsForTopic}
      />

      <fields.EmbeddedInstanceOptional<aas.types.Reference>
        label="Subject id"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-subject_id`
        }
        parent={props.instance}
        property="subjectId"
        snapInstance={
          props.snapInstance.subjectId
        }
        instance={
          props.instance.subjectId
        }
        newInstanceDefinitions={
          newinstancing.FOR_REFERENCE
        }
        setInstance={
          (instance) => {
            props.instance.subjectId = instance;
          }
        }
      />

      <fields.TextFieldRequired
        label="Time stamp"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-time_stamp`
        }
        value={props.snapInstance.timeStamp}
        onChange={
          (value) => {
            props.instance.timeStamp = value;
          }
        }
        errors={errorsForTimeStamp}
      />

      <fields.TextFieldOptional
        label="Payload"
        helpUrl={
          `${help.ROOT_URL}/Event_payload.html#property-payload`
        }
        value={props.snapInstance.payload}
        onChange={
          (value) => {
            props.instance.payload = value;
          }
        }
        errors={errorsForPayload}
      />
    </>
  )
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
