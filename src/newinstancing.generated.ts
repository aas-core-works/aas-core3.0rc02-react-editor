/**
 * Define how new instances of a class can be created.
 *
 * @remarks
 * This logic might seem unnecessary when only concrete classes without
 * descendants are considered. However, the matter becomes more complex when
 * we deal with classes with one or more concrete descendants:
 *
 * * We have to allow for a dispatch when adding items to a list of
 *   classes with multiple concrete descendants, and
 * * We have to account for a dispatch when creating an embedded instance
 *   of a class with multiple concrete descendants.
 */

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";

import * as emptory from "./emptory.generated";
import * as enhancing from "./enhancing.generated";

/**
 * Define how to create a new instance of a class.
 */
export class Definition<ClassT extends aas.types.Class> {
  /**
   * Human-readable label of the class
   */
  label: string;

  /**
   * Function to check the type at run-time
   */
  isType: (instance: aas.types.Class) => boolean;

  /**
   * Function to create an empty instance of the class
   */
  factory: (
    parent: aas.types.Class | null,
    relativePathFromParent: Array<number | string>
  ) => enhancing.Enhanced<ClassT>;

  constructor(
    label: string,
    isType: (instance: aas.types.Class) => boolean,
    factory: (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.Enhanced<ClassT>
  ) {
    this.label = label;
    this.isType = isType;
    this.factory = factory;
  }
}

export const FOR_EXTENSION = [
  new Definition(
    "Extension",
    aas.types.isExtension,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newExtension(), parent, relativePathFromParent)
  ),
];

export const FOR_ADMINISTRATIVE_INFORMATION = [
  new Definition(
    "Administrative information",
    aas.types.isAdministrativeInformation,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newAdministrativeInformation(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_QUALIFIER = [
  new Definition(
    "Qualifier",
    aas.types.isQualifier,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newQualifier(), parent, relativePathFromParent)
  ),
];

export const FOR_ASSET_ADMINISTRATION_SHELL = [
  new Definition(
    "Asset administration shell",
    aas.types.isAssetAdministrationShell,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newAssetAdministrationShell(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_ASSET_INFORMATION = [
  new Definition(
    "Asset information",
    aas.types.isAssetInformation,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newAssetInformation(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_RESOURCE = [
  new Definition(
    "Resource",
    aas.types.isResource,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newResource(), parent, relativePathFromParent)
  ),
];

export const FOR_SPECIFIC_ASSET_ID = [
  new Definition(
    "Specific asset id",
    aas.types.isSpecificAssetId,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newSpecificAssetId(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_SUBMODEL = [
  new Definition(
    "Submodel",
    aas.types.isSubmodel,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newSubmodel(), parent, relativePathFromParent)
  ),
];

export const FOR_SUBMODEL_ELEMENT = [
  new Definition(
    "Relationship element",
    aas.types.isRelationshipElement,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newRelationshipElement(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Annotated relationship element",
    aas.types.isAnnotatedRelationshipElement,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newAnnotatedRelationshipElement(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Basic event element",
    aas.types.isBasicEventElement,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newBasicEventElement(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Blob",
    aas.types.isBlob,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newBlob(), parent, relativePathFromParent)
  ),
  new Definition(
    "Capability",
    aas.types.isCapability,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newCapability(), parent, relativePathFromParent)
  ),
  new Definition(
    "Entity",
    aas.types.isEntity,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newEntity(), parent, relativePathFromParent)
  ),
  new Definition(
    "File",
    aas.types.isFile,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newFile(), parent, relativePathFromParent)
  ),
  new Definition(
    "Multi language property",
    aas.types.isMultiLanguageProperty,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newMultiLanguageProperty(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Operation",
    aas.types.isOperation,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newOperation(), parent, relativePathFromParent)
  ),
  new Definition(
    "Property",
    aas.types.isProperty,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newProperty(), parent, relativePathFromParent)
  ),
  new Definition(
    "Range",
    aas.types.isRange,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newRange(), parent, relativePathFromParent)
  ),
  new Definition(
    "Reference element",
    aas.types.isReferenceElement,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newReferenceElement(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Submodel element collection",
    aas.types.isSubmodelElementCollection,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newSubmodelElementCollection(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Submodel element list",
    aas.types.isSubmodelElementList,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newSubmodelElementList(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_DATA_ELEMENT = [
  new Definition(
    "Blob",
    aas.types.isBlob,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newBlob(), parent, relativePathFromParent)
  ),
  new Definition(
    "File",
    aas.types.isFile,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newFile(), parent, relativePathFromParent)
  ),
  new Definition(
    "Multi language property",
    aas.types.isMultiLanguageProperty,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newMultiLanguageProperty(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Property",
    aas.types.isProperty,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newProperty(), parent, relativePathFromParent)
  ),
  new Definition(
    "Range",
    aas.types.isRange,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newRange(), parent, relativePathFromParent)
  ),
  new Definition(
    "Reference element",
    aas.types.isReferenceElement,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newReferenceElement(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_OPERATION_VARIABLE = [
  new Definition(
    "Operation variable",
    aas.types.isOperationVariable,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newOperationVariable(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_CONCEPT_DESCRIPTION = [
  new Definition(
    "Concept description",
    aas.types.isConceptDescription,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newConceptDescription(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_REFERENCE = [
  new Definition(
    "Reference",
    aas.types.isReference,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newReference(), parent, relativePathFromParent)
  ),
];

export const FOR_KEY = [
  new Definition(
    "Key",
    aas.types.isKey,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) => enhancing.enhance(emptory.newKey(), parent, relativePathFromParent)
  ),
];

export const FOR_LANG_STRING = [
  new Definition(
    "Lang string",
    aas.types.isLangString,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newLangString(), parent, relativePathFromParent)
  ),
];

export const FOR_DATA_SPECIFICATION_CONTENT = [
  new Definition(
    "Data specification IEC 61360",
    aas.types.isDataSpecificationIec61360,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newDataSpecificationIec61360(),
        parent,
        relativePathFromParent
      )
  ),
  new Definition(
    "Data specification physical unit",
    aas.types.isDataSpecificationPhysicalUnit,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newDataSpecificationPhysicalUnit(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_EMBEDDED_DATA_SPECIFICATION = [
  new Definition(
    "Embedded data specification",
    aas.types.isEmbeddedDataSpecification,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newEmbeddedDataSpecification(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_VALUE_REFERENCE_PAIR = [
  new Definition(
    "Value reference pair",
    aas.types.isValueReferencePair,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(
        emptory.newValueReferencePair(),
        parent,
        relativePathFromParent
      )
  ),
];

export const FOR_VALUE_LIST = [
  new Definition(
    "Value list",
    aas.types.isValueList,
    (
      parent: aas.types.Class | null,
      relativePathFromParent: Array<number | string>
    ) =>
      enhancing.enhance(emptory.newValueList(), parent, relativePathFromParent)
  ),
];

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
