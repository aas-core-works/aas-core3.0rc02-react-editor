/**
 * Define how new instances of a class can be created.
 *
 * @remarks
 * This logic might seem unnecessary when only concrete classes without
 * descendants are considered. However, the matter becomes more complex when
 * we deal with classes with one or more concrete descendants:
 *
 * * We have to allow for a dispatch when adding items to a list of
 *   classes with multiple concrete descendants, and
 * * We have to account for a dispatch when creating an embedded instance
 *   of a class with multiple concrete descendants.
 */

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//

import * as aas from "@aas-core-works/aas-core3.0rc02-typescript";

import * as emptory from "./emptory.generated";
import * as model from "./model";

/**
 * Define how to create a new instance of a class.
 *
 * @remarks
 * This definition is presumed in the context of a given parent instance.
 */
export class Definition<ClassT extends aas.types.Class> {
  /**
   * Human-readable label of the class
   */
  label: string;

  /**
   * Function to check the type at run-time
   */
  isType: (instance: aas.types.Class) => boolean;

  /**
   * Function to create an empty instance of the class
   */
  factory: () => model.Enhanced<ClassT>;

  constructor(
    label: string,
    isType: (instance: aas.types.Class) => boolean,
    factory: () => model.Enhanced<ClassT>
  ) {
    this.label = label;
    this.isType = isType;
    this.factory = factory;
  }
}

export function forHasSemantics(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IHasSemantics>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("Extension", aas.types.isExtension, () =>
      model.enhance(emptory.newExtension(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Qualifier", aas.types.isQualifier, () =>
      model.enhance(emptory.newQualifier(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Specific asset id", aas.types.isSpecificAssetId, () =>
      model.enhance(emptory.newSpecificAssetId(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forExtension(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Extension>> {
  return [
    new Definition("Extension", aas.types.isExtension, () =>
      model.enhance(emptory.newExtension(), parent)
    ),
  ];
}

export function forHasExtensions(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IHasExtensions>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition(
      "Asset administration shell",
      aas.types.isAssetAdministrationShell,
      () => model.enhance(emptory.newAssetAdministrationShell(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Concept description", aas.types.isConceptDescription, () =>
      model.enhance(emptory.newConceptDescription(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forReferable(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IReferable>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition(
      "Asset administration shell",
      aas.types.isAssetAdministrationShell,
      () => model.enhance(emptory.newAssetAdministrationShell(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Concept description", aas.types.isConceptDescription, () =>
      model.enhance(emptory.newConceptDescription(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forIdentifiable(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IIdentifiable>> {
  return [
    new Definition(
      "Asset administration shell",
      aas.types.isAssetAdministrationShell,
      () => model.enhance(emptory.newAssetAdministrationShell(), parent)
    ),
    new Definition("Concept description", aas.types.isConceptDescription, () =>
      model.enhance(emptory.newConceptDescription(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
  ];
}

export function forHasKind(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IHasKind>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forHasDataSpecification(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IHasDataSpecification>> {
  return [
    new Definition(
      "Administrative information",
      aas.types.isAdministrativeInformation,
      () => model.enhance(emptory.newAdministrativeInformation(), parent)
    ),
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition(
      "Asset administration shell",
      aas.types.isAssetAdministrationShell,
      () => model.enhance(emptory.newAssetAdministrationShell(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Concept description", aas.types.isConceptDescription, () =>
      model.enhance(emptory.newConceptDescription(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forAdministrativeInformation(
  parent: aas.types.Class | null
): Array<Definition<aas.types.AdministrativeInformation>> {
  return [
    new Definition(
      "Administrative information",
      aas.types.isAdministrativeInformation,
      () => model.enhance(emptory.newAdministrativeInformation(), parent)
    ),
  ];
}

export function forQualifiable(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IQualifiable>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forQualifier(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Qualifier>> {
  return [
    new Definition("Qualifier", aas.types.isQualifier, () =>
      model.enhance(emptory.newQualifier(), parent)
    ),
  ];
}

export function forAssetAdministrationShell(
  parent: aas.types.Class | null
): Array<Definition<aas.types.AssetAdministrationShell>> {
  return [
    new Definition(
      "Asset administration shell",
      aas.types.isAssetAdministrationShell,
      () => model.enhance(emptory.newAssetAdministrationShell(), parent)
    ),
  ];
}

export function forAssetInformation(
  parent: aas.types.Class | null
): Array<Definition<aas.types.AssetInformation>> {
  return [
    new Definition("Asset information", aas.types.isAssetInformation, () =>
      model.enhance(emptory.newAssetInformation(), parent)
    ),
  ];
}

export function forResource(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Resource>> {
  return [
    new Definition("Resource", aas.types.isResource, () =>
      model.enhance(emptory.newResource(), parent)
    ),
  ];
}

export function forSpecificAssetId(
  parent: aas.types.Class | null
): Array<Definition<aas.types.SpecificAssetId>> {
  return [
    new Definition("Specific asset id", aas.types.isSpecificAssetId, () =>
      model.enhance(emptory.newSpecificAssetId(), parent)
    ),
  ];
}

export function forSubmodel(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Submodel>> {
  return [
    new Definition("Submodel", aas.types.isSubmodel, () =>
      model.enhance(emptory.newSubmodel(), parent)
    ),
  ];
}

export function forSubmodelElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.ISubmodelElement>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forRelationshipElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IRelationshipElement>> {
  return [
    new Definition(
      "Relationship element",
      aas.types.isRelationshipElement,
      () => model.enhance(emptory.newRelationshipElement(), parent)
    ),
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
  ];
}

export function forSubmodelElementList(
  parent: aas.types.Class | null
): Array<Definition<aas.types.SubmodelElementList>> {
  return [
    new Definition(
      "Submodel element list",
      aas.types.isSubmodelElementList,
      () => model.enhance(emptory.newSubmodelElementList(), parent)
    ),
  ];
}

export function forSubmodelElementCollection(
  parent: aas.types.Class | null
): Array<Definition<aas.types.SubmodelElementCollection>> {
  return [
    new Definition(
      "Submodel element collection",
      aas.types.isSubmodelElementCollection,
      () => model.enhance(emptory.newSubmodelElementCollection(), parent)
    ),
  ];
}

export function forDataElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IDataElement>> {
  return [
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
  ];
}

export function forProperty(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Property>> {
  return [
    new Definition("Property", aas.types.isProperty, () =>
      model.enhance(emptory.newProperty(), parent)
    ),
  ];
}

export function forMultiLanguageProperty(
  parent: aas.types.Class | null
): Array<Definition<aas.types.MultiLanguageProperty>> {
  return [
    new Definition(
      "Multi language property",
      aas.types.isMultiLanguageProperty,
      () => model.enhance(emptory.newMultiLanguageProperty(), parent)
    ),
  ];
}

export function forRange(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Range>> {
  return [
    new Definition("Range", aas.types.isRange, () =>
      model.enhance(emptory.newRange(), parent)
    ),
  ];
}

export function forReferenceElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.ReferenceElement>> {
  return [
    new Definition("Reference element", aas.types.isReferenceElement, () =>
      model.enhance(emptory.newReferenceElement(), parent)
    ),
  ];
}

export function forBlob(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Blob>> {
  return [
    new Definition("Blob", aas.types.isBlob, () =>
      model.enhance(emptory.newBlob(), parent)
    ),
  ];
}

export function forFile(
  parent: aas.types.Class | null
): Array<Definition<aas.types.File>> {
  return [
    new Definition("File", aas.types.isFile, () =>
      model.enhance(emptory.newFile(), parent)
    ),
  ];
}

export function forAnnotatedRelationshipElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.AnnotatedRelationshipElement>> {
  return [
    new Definition(
      "Annotated relationship element",
      aas.types.isAnnotatedRelationshipElement,
      () => model.enhance(emptory.newAnnotatedRelationshipElement(), parent)
    ),
  ];
}

export function forEntity(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Entity>> {
  return [
    new Definition("Entity", aas.types.isEntity, () =>
      model.enhance(emptory.newEntity(), parent)
    ),
  ];
}

export function forEventPayload(
  parent: aas.types.Class | null
): Array<Definition<aas.types.EventPayload>> {
  return [
    new Definition("Event payload", aas.types.isEventPayload, () =>
      model.enhance(emptory.newEventPayload(), parent)
    ),
  ];
}

export function forEventElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IEventElement>> {
  return [
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
  ];
}

export function forBasicEventElement(
  parent: aas.types.Class | null
): Array<Definition<aas.types.BasicEventElement>> {
  return [
    new Definition("Basic event element", aas.types.isBasicEventElement, () =>
      model.enhance(emptory.newBasicEventElement(), parent)
    ),
  ];
}

export function forOperation(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Operation>> {
  return [
    new Definition("Operation", aas.types.isOperation, () =>
      model.enhance(emptory.newOperation(), parent)
    ),
  ];
}

export function forOperationVariable(
  parent: aas.types.Class | null
): Array<Definition<aas.types.OperationVariable>> {
  return [
    new Definition("Operation variable", aas.types.isOperationVariable, () =>
      model.enhance(emptory.newOperationVariable(), parent)
    ),
  ];
}

export function forCapability(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Capability>> {
  return [
    new Definition("Capability", aas.types.isCapability, () =>
      model.enhance(emptory.newCapability(), parent)
    ),
  ];
}

export function forConceptDescription(
  parent: aas.types.Class | null
): Array<Definition<aas.types.ConceptDescription>> {
  return [
    new Definition("Concept description", aas.types.isConceptDescription, () =>
      model.enhance(emptory.newConceptDescription(), parent)
    ),
  ];
}

export function forReference(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Reference>> {
  return [
    new Definition("Reference", aas.types.isReference, () =>
      model.enhance(emptory.newReference(), parent)
    ),
  ];
}

export function forKey(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Key>> {
  return [
    new Definition("Key", aas.types.isKey, () =>
      model.enhance(emptory.newKey(), parent)
    ),
  ];
}

export function forLangString(
  parent: aas.types.Class | null
): Array<Definition<aas.types.LangString>> {
  return [
    new Definition("Lang string", aas.types.isLangString, () =>
      model.enhance(emptory.newLangString(), parent)
    ),
  ];
}

export function forEnvironment(
  parent: aas.types.Class | null
): Array<Definition<aas.types.Environment>> {
  return [
    new Definition("Environment", aas.types.isEnvironment, () =>
      model.enhance(emptory.newEnvironment(), parent)
    ),
  ];
}

export function forDataSpecificationContent(
  parent: aas.types.Class | null
): Array<Definition<aas.types.IDataSpecificationContent>> {
  return [
    new Definition(
      "Data specification IEC 61360",
      aas.types.isDataSpecificationIec61360,
      () => model.enhance(emptory.newDataSpecificationIec61360(), parent)
    ),
    new Definition(
      "Data specification physical unit",
      aas.types.isDataSpecificationPhysicalUnit,
      () => model.enhance(emptory.newDataSpecificationPhysicalUnit(), parent)
    ),
  ];
}

export function forEmbeddedDataSpecification(
  parent: aas.types.Class | null
): Array<Definition<aas.types.EmbeddedDataSpecification>> {
  return [
    new Definition(
      "Embedded data specification",
      aas.types.isEmbeddedDataSpecification,
      () => model.enhance(emptory.newEmbeddedDataSpecification(), parent)
    ),
  ];
}

export function forValueReferencePair(
  parent: aas.types.Class | null
): Array<Definition<aas.types.ValueReferencePair>> {
  return [
    new Definition("Value reference pair", aas.types.isValueReferencePair, () =>
      model.enhance(emptory.newValueReferencePair(), parent)
    ),
  ];
}

export function forValueList(
  parent: aas.types.Class | null
): Array<Definition<aas.types.ValueList>> {
  return [
    new Definition("Value list", aas.types.isValueList, () =>
      model.enhance(emptory.newValueList(), parent)
    ),
  ];
}

export function forDataSpecificationIec61360(
  parent: aas.types.Class | null
): Array<Definition<aas.types.DataSpecificationIec61360>> {
  return [
    new Definition(
      "Data specification IEC 61360",
      aas.types.isDataSpecificationIec61360,
      () => model.enhance(emptory.newDataSpecificationIec61360(), parent)
    ),
  ];
}

export function forDataSpecificationPhysicalUnit(
  parent: aas.types.Class | null
): Array<Definition<aas.types.DataSpecificationPhysicalUnit>> {
  return [
    new Definition(
      "Data specification physical unit",
      aas.types.isDataSpecificationPhysicalUnit,
      () => model.enhance(emptory.newDataSpecificationPhysicalUnit(), parent)
    ),
  ];
}

//
// WARNING: this code has been automatically generated by codegen.
//
// DO NOT edit or append.
//
